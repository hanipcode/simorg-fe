/**
 * Computes a top-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba($color-black, nth(0.12 0.16 0.19 0.25 0.3, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
   * Computes a bottom-shadow for a card effect.
   *
   * @param {Number} $depth - depth level
   *
   * @return {List}
   */
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba($color-black, nth(0.24 0.23 0.23 0.22 0.22, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
   * Gives a card depth effect.
   *
   * @param {Number} $depth - depth level (between 1 and 5)
   *
   * @link https://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
   *
   * @requires {function} top-shadow
   * @requires {function} bottom-shadow
   */
@mixin mShadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

@mixin mShadowBottom($depth) {
  box-shadow: bottom-shadow($depth);
}

@mixin mShakeAnimation() {
  animation: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  perspective: 1000px;
}
